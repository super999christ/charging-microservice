pipeline {
    agent {
        label "s32-windows"
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
        AWS_REGION = "us-west-2"
        IMAGE_NAME = "charging/charging-events:latest"
        ECR_URI = "101265448075.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_FQDN = "${ECR_URI}/${IMAGE_NAME}"
        PATH = "${env.PATH},C:\\Program Files\\Docker\\docker.exe"    // worker node complains that docker isn't in path when it actually is.
    }

    options {
        skipDefaultCheckout true // Jenkins will fail to clone repository if not skipped
    }
    // tools {
    //    dockerTool "docker"
    // }
    stages {
        stage("Git checkout") {
            steps {
                git branch: "main", credentialsId: "jenkins", url: "https://github.com/AtlisMotorVehicles/Charging-Microservices"
            }
        }
        stage('Initialize') {
            steps {
                def dockerHome = tool 'docker'
                env.PATH = "${dockerHome}/bin:${env.PATH}"
            }
        }
        stage("Log into AWS ECR") {
            // agent {
            //     docker {
            //         image 'amazon/aws-cli'
            //         reuseNode true
            //     }
            // }

            // steps {
            //     script {
            //         docker.image("amazon/aws-cli").inside {
            //             sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}"
            //         }
            //     }
            // }
            // docker.image("amazon/aws-cli").inside {

            // }

            steps {
                bat ""
                bat "docker ps"
                bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}"
            }
        }
        stage("Build image") {
            steps {
                script {
                    dir("backend/apps/charging-event") {
                        dockerImage = docker.build "${IMAGE_FQDN}"
                    }
                }
            }
        }
        stage("Push image to ECR") {
            steps {
                bat "docker push ${IMAGE_FQDN}"
            }
        }
    }
}